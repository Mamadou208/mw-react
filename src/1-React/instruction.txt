###################################
# 1.1 Components 									#
###################################
	Before starting here make sure that the project is running, following the steps described in the readme. Browsing to localhost:3000 should return a 'Hello World' page. 

	In the root folder of this project 'mw-react/src/index.js' the App component from App.js is imported and appended to the root element of the page, which is defined in '/mw-react/public/index.html'. 

	We will not be editing the plain HTML page, for this project however we have to change 'index.js' occasionally.
	It should currently look like this: 
	//-----------------------------------
		import App from './1-React/App'				// <--- Filename containing this component
			ReactDOM.render(
				<App />, 													// <--- Component name
			document.getElementById('root'));		// <--- Base HTML document
		registerServiceWorker()
	//-----------------------------------

	Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
	Open and read the code and comments in /src/1-React/App.js and /src/1-React/External.js
	React. Component has other functions besides render, for updating mounting an unmounting, but we'll get into that later. 

	Try writing and rendering your own component, which contains some text and a non functional button. Use the Bootstrap button style for that (See link below). React-Bootstrap should already be installed, and the .css file is already imported in 'index.js'.
	https://react-bootstrap.github.io/components.html

	Keep in mind that elements returned should always be single elements, e.g:
	//-----------------------------------
	return ( 	// Does NOT compile
		<p>MyClass Instance</p>
		<p>MyClass Instance</p>
	)

	return ( 	// Does compile
		<div>
			<p>MyClass Instance</p>
			<p>MyClass Instance</p>
		</div>
	)
	//-----------------------------------


###################################
# 1.2 Props & State 							#
###################################
	
	Components are like JavaScript functions. They accept arbitrary inputs (called "props") and return React elements describing what should appear on the screen. There are two types of data that control a component: props and state. props are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use state.

	When to use which?
	https://github.com/uberVU/react-guide/blob/master/props-vs-state.md

	Even though the state is for changing data, the state is immutable, it is updated via setState() which takes a completely new state object as its argument. This also triggers a re-render. This means if we want to change only some values, we have to create a copy of the current state first, moddify this copy and then pass it to setState(). 

	Import and render the Props component from 'Props.js', based on the previous step. 
	Look at the state example and try implementing a number line, displaying a current number value, the previous and the next number on the line. For example: 
		Pervious 	Current 	Next
			0					1					2

	The current number should be saved in the state and can be incremented and decremented with two buttons. Use the NumberLine component to visualize the line. 


###################################
# 1.2 A more complext State				#
###################################

	Change '/mw-react/src/index.js' so that it appends the App component from './Solution.js'
	Open the app in the browser and try the different buttons. Other than the initial values the names are randomly generated strings. In this example we are working with a list person objects rather than just a single value in the state. 

	Now change '/mw-react/src/index.js' so that it appends the App component from './Template.js' and try recreating the app from the empty template.

	1. 	Start by adding an inital state and passing the list as props to the People Component. Test if you can access the data by using a console.log.
	2. 	Change the People Component with a forloop so that it displays the list of people. 
	3. 	Edit the onClick functions to manipulate the state. For this you can use the .slice and .concat functions, which return a copy of the moddified array. 
